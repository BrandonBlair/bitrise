import os

from requests import Session

from bitrise.services import Bitrise
from bitrise.services.apps import BitriseApp
from bitrise.exceptions import BitriseException


class BitriseClient(object):
    def __init__(self, api_token=None):
        """Client handling communication with Bitrise services

        Args:
            bitrise_token (str): API Token generated by Bitrise in account settings. Can be passed
                                 in explicitly, or set as environment variable BITRISE_TOKEN
        """

        auth_token = api_token or os.environ['BITRISE_TOKEN']

        if not auth_token:
            raise ValueError(
                'Must provide a bitrise token - set BITRISE_TOKEN environment variable or pass a '
                'token into call to BitriseClient'
            )

        self.auth_token = auth_token
        self.session = Session()
        self._add_auth_header()

    @property
    def bitrise(self):
        return Bitrise()

    @property
    def apps(self):
        apps_url = self.bitrise.apps.url
        apps_data = self.bitrise.apps.get(session=self.session).json()
        bitrise_apps = [
            BitriseApp(self.session, apps_url, app) for app in apps_data['data']
        ]
        return bitrise_apps

    def get_app_by_name(self, app_name):
        app_name = app_name.lower()
        matching_apps = [app for app in self.apps if app.title.lower() == app_name]
        if len(matching_apps) != 1:
            raise BitriseException(f'Expected 1 app with title {app_name}, found {matching_apps}')
        return matching_apps[0]

    def _add_auth_header(self):
        auth_header = {'Authorization': f'token {self.auth_token}'}
        self.session.headers.update(auth_header)
